name: Auto Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [master]

env:
  JAVA_VERSION: '17'

jobs:
  auto_release:
    name: Automatic Release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
          
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Calculate next version
        id: next_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
          IFS='.' read -r major minor patch <<< "$BASE_VERSION"
          NEW_PATCH=$((patch + 1))
          RELEASE_VERSION="${major}.${minor}.${NEW_PATCH}"
          NEXT_SNAPSHOT="${major}.${minor}.$((NEW_PATCH + 1))-SNAPSHOT"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "next_snapshot=$NEXT_SNAPSHOT" >> $GITHUB_OUTPUT
          
      - name: Update POM to release version
        run: |
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.release_version }} -DgenerateBackupPoms=false
          
      - name: Build and test
        run: |
          mvn clean verify -P ex-integration -DskipITs=false
          
      - name: Commit and tag release
        run: |
          git add pom.xml */pom.xml
          git commit -m "Auto-release version ${{ steps.next_version.outputs.release_version }}"
          git tag -a "v${{ steps.next_version.outputs.release_version }}" -m "Auto-release ${{ steps.next_version.outputs.release_version }}"
          
      - name: Deploy to GitHub Packages
        run: |
          mvn deploy -P ex-integration -DskipTests=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.next_version.outputs.release_version }}
          release_name: Video Renderer ${{ steps.next_version.outputs.release_version }}
          body: |
            ðŸ¤– **Automatically released** after PR #${{ github.event.pull_request.number }} merge
            
            **PR**: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
          draft: false
          prerelease: false
          
      - name: Update to next SNAPSHOT version
        run: |
          mvn versions:set -DnewVersion=${{ steps.next_version.outputs.next_snapshot }} -DgenerateBackupPoms=false
          git add pom.xml */pom.xml
          git commit -m "Prepare for next development iteration ${{ steps.next_version.outputs.next_snapshot }}"
          
      - name: Push changes and tags
        run: |
          git push origin HEAD
          git push origin v${{ steps.next_version.outputs.release_version }}
          
      - name: Delete merged branch
        run: |
          git push origin --delete ${{ github.event.pull_request.head.ref }}
        continue-on-error: true